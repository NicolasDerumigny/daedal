# Copyright (C) Eta Scale AB. Licensed under the Eta Scale Open Source License. See the LICENSE file for details.

######
# Makefile for DAE Code (latest updated October 2016).
# 

include $(LEVEL)/common/Makefile.environment

######
# Environment
#

# LLVM tools
LINK=$(LLVM_BIN)/llvm-link
OPT=$(LLVM_BIN)/opt
CLANG=$(LLVM_BIN)/clang 
CLANGCPP=$(LLVM_BIN)/clang++
# Optimization level
CFLAGS += -O3
CXXFLAGS += -O3
CFLAGS += -mrtm -Wno-override-module
CXXFLAGS += -mrtm -Wno-override-module

DVFS_FLAGS=$(COMPILER_LIB)/libDAE_prof_ST.a -lcpufreq

######
# Suffix definitions
#

# INDIR_COUNT and GRAN_COUNT set in Makefile.targets
TM_INDIRCOUNT_SUFFIX=tm-indir$(INDIR_COUNT)
TM_GRANCOUNT_SUFFIX=tm-gran$(GRAN_COUNT)
TM_GRAN_SUFFIX=tm-gran
GRAN_SUFFIX=gran
TM_EXTRACT_SUFFIX=tm-extract
MARKED_SUFFIX=marked

######
# Helper definitions
#

# Helper to generate prerequisites of rules
get_extract=$$(addprefix $(BINDIR)/, $$(addsuffix .$$(TM_EXTRACT_SUFFIX).ll,$$(basename $$(SRCS))))
get_marked=$$(addprefix $(BINDIR)/, $$(addsuffix .$$(MARKED_SUFFIX).ll,$$(basename $$(SRCS))))
get_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .ll, $$(basename $$(SRCS))))

# gran.ll files required by Globals.ll and DAE-header.ll
get_gran_files=$$(shell grep -sl "__kernel__" $(BINDIR)/*.$(MARKED_SUFFIX).ll | sed 's/.$(MARKED_SUFFIX).ll/.${GRAN_SUFFIX}.ll/g')

# Debugging purposes: keep all generated ll files
.PRECIOUS: %.ll
.PHONY: $(get_gran_files)
.SECONDARY:

.SECONDEXPANSION:

# Create marked files first (marked whether to decouple or not), then
# evaluate how to build the targets
all: perf libs $(get_marked)
	$(MAKE) $(TARGETS)

libs:
	$(MAKE) -C $(LIB_DIR)

perf:
	$(MAKE) PERF_TOOL=$(PERF_COUNTERS_TOOL) -C $(LIB_PERF)

$(BINDIR)/%.$(ORIGINAL_SUFFIX): $(get_objects)
	$(CLANGCPP) $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(LIB_LLS) -L $(COMPILER_LIB) -o $@

$(BINDIR)/$(BENCHMARK).$(ARGS_SUFFIX): $(BINDIR)/$(BENCHMARK).$(ARGS_SUFFIX).ll
	$(CLANGCPP) $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).%.$(TM_FULL_DAE_SUFFIX): $(BINDIR)/$(BENCHMARK).%.$(TM_FULL_DAE_SUFFIX).ll $(BINDIR)/$(BENCHMARK).%.$(TM_FULL_DAE_SUFFIX).GV_DAE.ll
	$(CLANGCPP) $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).%.$(TM_DAE_SUFFIX): $(BINDIR)/$(BENCHMARK).%.$(TM_DAE_SUFFIX).ll $(BINDIR)/$(BENCHMARK).%.$(TM_DAE_SUFFIX).GV_DAE.ll
	$(CLANGCPP) $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

# tm-args binary must be built from original .ll so that compilation
# steps are identical except for the extra pass
$(BINDIR)/$(BENCHMARK).$(ARGS_SUFFIX).ll: $(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).ll
	$(OPT) -S -load $(COMPILER_LIB)/libTMArgsPrefetcher.so -tm-prefetch-args -o $@ $^

$(BINDIR)/$(BENCHMARK).$(TM_GRANCOUNT_SUFFIX).$(TM_INDIRCOUNT_SUFFIX).$(TM_FULL_DAE_SUFFIX).ll: $(BINDIR)/$(BENCHMARK).$(TM_EXTRACT_SUFFIX).ll
	$(OPT) -S -load $(COMPILER_LIB)/libTMFKernelPrefetch.so \
	-tbaa -basicaa -tm-f-kernel-prefetch \
        -indir-thresh $(INDIR_COUNT) -follow-partial \
	-always-inline -load $(COMPILER_LIB)/libRemoveRedundantPref.so -rrp \
	-load $(COMPILER_LIB)/libTMArgsPrefetcher.so -tm-prefetch-args -o $@ $^

$(BINDIR)/$(BENCHMARK).$(TM_GRANCOUNT_SUFFIX).$(TM_INDIRCOUNT_SUFFIX).$(TM_DAE_SUFFIX).ll: $(BINDIR)/$(BENCHMARK).$(TM_EXTRACT_SUFFIX).ll
	$(OPT) -S -load $(COMPILER_LIB)/libTMFKernelPrefetch.so \
	-tbaa -basicaa -tm-f-kernel-prefetch \
        -indir-thresh $(INDIR_COUNT) -follow-partial \
	-always-inline -load $(COMPILER_LIB)/libRemoveRedundantPref.so -rrp -o $@ $^

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).ll: $(get_objects) $(LIB_LLS)
	$(LINK) -S -o $@ $^

$(BINDIR)/$(BENCHMARK).$(TM_EXTRACT_SUFFIX).ll: $(get_extract) $(LIB_LLS)
	$(LINK) -S -o $@ $^

$(BINDIR)/DAE-header.ll: $(get_gran_files)
ifdef <
	head -n 3 $< | tail -n -2 > $@
else
	touch $@
endif

%.GV_DAE.ll: $(BINDIR)/DAE-header.ll $(BINDIR)/Globals.ll
	cat $^ |  sed 's/\(_granularity.* \)[0-9]\+/\1'"$(GRAN_COUNT)"'/g' > $@

$(BINDIR)/Globals.ll: $(get_gran_files)
	touch Globals.ll
	mv Globals.ll $(BINDIR)


# General object rules
#
$(BINDIR)/%.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.ll: %.cpp
	mkdir -p $(BINDIR)/$(shell dirname $<)
	$(CLANGCPP) $(CXXFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.ll: %.cc
	mkdir -p $(BINDIR)/$(shell dirname $<)
	$(CLANGCPP) $(CXXFLAGS)  -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

%.$(MARKED_SUFFIX).ll: %.stats.ll
	 $(OPT) -S -load $(COMPILER_LIB)/libMarkLoopsToTransform.so \
	-mark-loops -require-delinquent=false -bench-name $(BENCHMARK) \
	-o $@ $<; \

%.$(TM_GRAN_SUFFIX).ll: %.$(MARKED_SUFFIX).ll
	-$(OPT) -S -loop-simplify -reg2mem -licm -load $(COMPILER_LIB)/libTMLoopChunk.so \
	-tm-loop-chunk -bench-name $(BENCHMARK) -mem2reg -o $@ $<
	#This step is actually useless as loop chunking is disabled

%.${GRAN_SUFFIX}.ll: %.${MARKED_SUFFIX}.ll
	-$(OPT) -S -loop-simplify -reg2mem -licm -load $(COMPILER_LIB)/libLoopChunk.so \
	-loop-chunk -bench-name $(BENCHMARK) -mem2reg -o $@ $<

%.$(TM_EXTRACT_SUFFIX).ll: %.$(TM_GRAN_SUFFIX).ll
	$(OPT) -S -load $(COMPILER_LIB)/libTMLoopExtract.so \
	-aggregate-extracted-args -tm-loop-extract -is-dae -bench-name $(BENCHMARK) -o $@ $<; \

%.stats.ll: %.ll
	cat $< \
	| sed 's/tail \(call void @exit(\)/\1/g' \
	| sed 's/call void @exit(/call void @profiler_print_stats()\n  &/g' \
	| sed 's/declare void @exit(/declare void @profiler_print_stats()\n&/g' \
	> $@

clean:
	rm -f *.o $(BINDIR)/* && $(MAKE) -C $(LIB_DIR) clean
