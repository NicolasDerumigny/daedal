# Copyright (C) Eta Scale AB. Licensed under the Eta Scale Open Source License. See the LICENSE file for details.

######
# Makefile for DAE Code (latest updated October 2016).
# 

include $(LEVEL)/common/Makefile.environment

######
# Environment
#

# LLVM tools
LINK=$(LLVM_BIN)/llvm-link
OPT=$(LLVM_BIN)/opt
CLANG=$(LLVM_BIN)/clang 
CLANGCPP=$(LLVM_BIN)/clang++
# -O3 deliberately not added to CFLAGS in order to generate unoptimized .ll files
CFLAGS += 
CFLAGS += -mrtm -Wno-override-module
# Enable optimizations in the final step -O3
CXXFLAGS += 
CXXFLAGS += -mrtm -Wno-override-module

DVFS_FLAGS=$(COMPILER_LIB)/libDAE_prof_ST.a -lcpufreq

# DAE Marking
DAE_MARKER='__kernel__'

######
# Helper definitions
#

# Helper to generate prerequisites of rules
get_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .ll, $$(basename $$(SRCS))))
get_stats_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .stats.ll,$$(basename $$(SRCS))))
get_O3_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .O3.ll, $$(basename $$(SRCS))))
get_stats_O3_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .stats.O3.ll,$$(basename $$(SRCS))))
get_tm_arg_objects=$$(addprefix $(BINDIR)/, $$(addsuffix .$(TM_ARG_SUFFIX).ll, $$(basename $$(SRCS))))
get_tm_arg_stats_objects=$$(addprefix $(BINDIR)/, $$(addsuffix $(TM_ARG_SUFFIX).stats.ll,$$(basename $$(SRCS))))
get_gran_files=$$(shell grep -sl "__kernel__" $(BINDIR)/*.marked.ll)

# Debugging purposes: keep all generated ll files
.PRECIOUS: %.ll
.PHONY: $(get_gran_files)
.SECONDARY:

.SECONDEXPANSION:

# Create marked files first (marked whether to decouple or not), then
# evaluate how to build the targets
all: perf libs
	$(MAKE) $(TARGETS)

libs: $(SRCS_LIBS)
ifdef SRCS_LIBS
	$(MAKE) -C $(LIB_DIR)
endif

perf:
	$(MAKE) PERF_TOOL=$(PERF_COUNTERS_TOOL) -C $(LIB_PERF)

$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX): $(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX): $(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX)2: $(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).extracted.ll $(BINDIR)/$(BENCHMARK).GV_DAE.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX): $(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(TM_FULL_DAE_SUFFIX): $(BINDIR)/$(BENCHMARK).$(TM_FULL_DAE_SUFFIX).ll $(BINDIR)/$(BENCHMARK).GV_DAE.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(TM_DAE_SUFFIX): $(BINDIR)/$(BENCHMARK).$(TM_DAE_SUFFIX).ll $(BINDIR)/$(BENCHMARK).GV_DAE.ll
	$(CLANGCPP) -O3 $(CXXFLAGS) $(CFLAGS) $^ $(LIB_OBJS) $(LDFLAGS) $(DVFS_FLAGS) -o $@

$(BINDIR)/$(BENCHMARK).$(TM_DAE_SUFFIX).ll: $(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).extracted.ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libTMFKernelPrefetch.so -tbaa -basicaa -tm-f-kernel-prefetch -indir-thresh 25 -follow-partial -always-inline \
	-load $(COMPILER_LIB)/libRemoveRedundantPref.so -rrp \
	-o $@ $^

$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).extracted.ll: $(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).marked.ll
	$(OPT) -S \
	-loop-simplify -licm \
	-load $(COMPILER_LIB)/libTMLoopExtract.so -aggregate-extracted-args -tm-loop-extract -is-dae -bench-name $(BENCHMARK) \
	-o $@ $<

$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).marked.ll: $(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libMarkLoopsToTransform.so -mark-loops -require-delinquent=false -bench-name $(BENCHMARK) \
        -o $@ $<

$(BINDIR)/$(BENCHMARK).$(TM_FULL_DAE_SUFFIX).ll: $(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).extracted.ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libTMFKernelPrefetch.so -tbaa -basicaa -tm-f-kernel-prefetch -indir-thresh 25 -follow-partial -always-inline \
	-load $(COMPILER_LIB)/libRemoveRedundantPref.so -rrp \
	-o $@ $^

$(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).extracted.ll: $(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).marked.ll
	$(OPT) -S \
	-loop-simplify -licm \
	-load $(COMPILER_LIB)/libTMLoopExtract.so -aggregate-extracted-args -tm-loop-extract -is-dae -bench-name $(BENCHMARK) \
	-o $@ $<

$(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).marked.ll: $(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libMarkLoopsToTransform.so -mark-loops -require-delinquent=false -bench-name $(BENCHMARK) \
	-o $@ $<

# Printing stats introduces an overhead. For gathering performance
# numbers, stats should be disabled to get the correct execution time
# (fair for all versions).
ifeq ($(ENABLE_STATS),yes)
$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).ll: $(get_stats_O3_objects) $(LIB_LLS)
else
$(BINDIR)/$(BENCHMARK).$(ORIGINAL_SUFFIX).ll: $(get_O3_objects) $(LIB_LLS)
endif
	$(LINK) -S -o $@ $^

# Printing stats introduces an overhead. For gathering performance
# numbers, stats should be disabled to get the correct execution time
# (fair for all versions).
ifeq ($(ENABLE_STATS),yes)
$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).ll: $(get_stats_objects) $(LIB_LLS)
else
$(BINDIR)/$(BENCHMARK).$(CAE_SUFFIX).ll: $(get_objects) $(LIB_LLS)
endif
	$(LINK) -S -o $@ $^

# Printing stats introduces an overhead. For gathering performance
# numbers, stats should be disabled to get the correct execution time
# (fair for all versions).
ifeq ($(ENABLE_STATS),yes)
$(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).ll: $(get_tm_arg_stats_objects) $(LIB_LLS)
else
$(BINDIR)/$(BENCHMARK).$(TM_ARG_SUFFIX).ll: $(get_tm_arg_objects) $(LIB_LLS)
endif
	$(LINK) -S -o $@ $^

$(BINDIR)/$(BENCHMARK).GV_DAE.ll: $(BINDIR)/DAE-header.ll $(BINDIR)/Globals.ll
	cat $^ > $@

$(BINDIR)/DAE-header.ll: $(get_gran_files)
ifdef <
	head -n 3 $< | tail -n -2 > $@
else
	touch $@
endif

$(BINDIR)/Globals.ll: $(get_gran_files)
	touch Globals.ll
	mv Globals.ll $(BINDIR)

# General object rules
#
$(BINDIR)/%.ll: %.c
	mkdir -p $(BINDIR)/$(shell dirname $^)
	$(CLANG) -O1 $(CFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.ll: %.cpp
	mkdir -p $(BINDIR)/$(shell dirname $<)
	$(CLANGCPP) -O1 $(CXXFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.ll: %.cc
	mkdir -p $(BINDIR)/$(shell dirname $<)
	$(CLANGCPP) -O1 $(CXXFLAGS) -I $(LIB_DIR)/lib $^ -S -emit-llvm -o $@

$(BINDIR)/%.O3.ll: $(BINDIR)/%.ll
	$(OPT) -S -O3 \
	-o $@ $^

$(BINDIR)/%.stats.O3.ll: $(BINDIR)/%.O3.ll
	cat $< \
	| sed 's/tail \(call void @exit(\)/\1/g' \
	| sed 's/call void @exit(/call void @profiler_print_stats()\n  &/g' \
	| sed 's/declare void @exit(/declare void @profiler_print_stats()\n&/g' \
	> $@

$(BINDIR)/%.stats.ll: $(BINDIR)/%.ll
	cat $< \
	| sed 's/tail \(call void @exit(\)/\1/g' \
	| sed 's/call void @exit(/call void @profiler_print_stats()\n  &/g' \
	| sed 's/declare void @exit(/declare void @profiler_print_stats()\n&/g' \
	> $@

$(BINDIR)/%.$(TM_ARG_SUFFIX).stats.ll: $(BINDIR)/%.stats.ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libTMArgsPrefetcher.so -tm-prefetch-args \
	-o $@ $^

$(BINDIR)/%.$(TM_ARG_SUFFIX).ll: $(BINDIR)/%.ll
	$(OPT) -S \
	-load $(COMPILER_LIB)/libTMArgsPrefetcher.so -tm-prefetch-args \
	-o $@ $^

clean:
	rm -f *.o $(BINDIR)/* && $(MAKE) -C $(LIB_DIR) clean
